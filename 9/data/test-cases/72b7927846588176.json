{"uid":"72b7927846588176","name":"test_input_name_pozitive[uper]","fullName":"test_registration#test_input_name_pozitive","historyId":"ede9a553d9d2bf42ac48be12bb7682b1","time":{"start":1673111103242,"stop":1673111111435,"duration":8193},"status":"failed","statusMessage":"AssertionError","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae44dbaebb35a05cd3515a80f5938801\")>\nname = 'МАРИЯ'\n\n    @allure.story(\n        \"TC_007.01 | Форма 'Авторизации' - Ввод валидных данных в поле для ввода имени.\"\n    )\n    @pytest.mark.parametrize(\n        \"name\",\n        [\n            generate_string(2),\n            generate_string(3),\n            generate_string(15),\n            generate_string(29),\n            generate_string(30),\n            \"Анна-Мария\",\n            \" Анна\",\n            \"Мария \",\n            \"МАРИЯ\",\n        ],\n        ids=[\n            \"2 symbols\",\n            \"3 symbols\",\n            \"15 symbols\",\n            \"29 symbols\",\n            \"30 symbols\",\n            \"with -\",\n            \"begin space\",\n            \"end space\",\n            \"uper\",\n        ],\n    )\n    def test_input_name_pozitive(browser, name):\n        # создает экземпляр страницы авторизации\n        page = LoginPage(browser, link)\n        # переходит на страницу регистрации\n        page.go_registration()\n        # создает экземпляр страницы регистрации\n        page = RegistrPage(browser, link)\n        # вводит имя в поле Имя и проверяет наличие сообщения об ошибке\n>       page.input_name(name)\n\ntest_registration.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.registr_page.RegistrPage object at 0x7f15e1d10190>, name = 'МАРИЯ'\n\n    def input_name(self, name):\n        input = self.browser.find_element(*RegistrPageLocators.INPUT_FIRSTNAME)\n        input.send_keys(name)\n        self.browser.find_element(*RegistrPageLocators.BTN_REGISTR).click()\n>       assert not self.element_is_present(*RegistrPageLocators.ERR)\nE       AssertionError\n\npages/registr_page.py:10: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1673111101471,"stop":1673111103241,"duration":1770},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"browser::0","time":{"start":1673111111440,"stop":1673111111497,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"TC_007.01 | Форма 'Авторизации' - Ввод валидных данных в поле для ввода имени."},{"name":"suite","value":"test_registration"},{"name":"host","value":"fv-az136-695"},{"name":"thread","value":"2545-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_registration"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"name","value":"'МАРИЯ'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"72b7927846588176.json","parameterValues":["'МАРИЯ'"]}